---
- name: configure SNOW user for demo environment
  hosts: 127.0.0.1
  connection: local
  become: false

  vars:

    # servicenow instance vars
    instance:
    username:
    password:

    # username/password to use for new user account
    demo_username:
    demo_password:

    # role to attach to user - needs to be a valid role defined in servicenow
    role: Demo

    # whether or not this playbook run will create or cleanup the user account
    cleanup: false

  tasks:

  - name: set first name for user
    set_fact:
      first_name: "{{ ['Craig','Dafne','Nuno','Roger','Monish','Anshul','Hicham','Sean','Andrius','Tom','Colin'] | random }}"

  - name: create user with the proper servicenow role
    block:

    - name: create user
      uri:
        url: "{{ instance }}/api/now/table/sys_user?sysparm_input_display_value=true"
        method: POST
        user: "{{ username }}"
        password: "{{ password }}"
        force_basic_auth: true
        headers:
          Content-Type: application/json
        body_format: json
        body:
          user_name: "{{ demo_username }}"
          user_password: "{{ demo_password }}"
          first_name: "{{ first_name }}"
          last_name: Demouser
          department: IT
          email: "{{ demo_username }}@example.com"
          title: instruqt_demo
        status_code: 201
      register: user_create
      when: not cleanup

    - name: attach role to new user
      uri:
        url: "{{ instance }}/api/now/table/sys_user_has_role"
        method: POST
        user: "{{ username }}"
        password: "{{ password }}"
        force_basic_auth: true
        headers:
          Content-Type: application/json
        body_format: json
        body:
          user: "{{ demo_username }}"
          role: "{{ role }}"
        status_code: 201
      register: user_role
      when: not cleanup

    - name: find user sys_id
      uri:
        url: "{{ instance }}/api/now/table/sys_user?sysparm_query=user_name={{ demo_username }}"
        method: GET
        user: "{{ username }}"
        password: "{{ password }}"
        force_basic_auth: true
        headers:
          Content-Type: application/json
        status_code: 200
      register: user_info
      when: cleanup

    - name: convert user_info to paths
      set_fact:
        user_info_paths: "{{ lookup('ansible.utils.to_paths', user_info) }}"

    - name: dump user info
      debug:
        var: user_info

    - name: cleanup user
      uri:
        url: "{{ instance }}/api/now/table/sys_user/{{ user_info_paths['json.result[0].sys_id'] }}"
        method: DELETE
        user: "{{ username }}"
        password: "{{ password }}"
        force_basic_auth: true
        headers:
          Content-Type: application/json
        status_code: 204
      register: user_delete
      when: cleanup

    rescue:

    - name: cleanup user
      uri:
        url: "{{ instance }}/api/now/table/sys_user/{{ user_info_paths['json.result[0].sys_id'] }}"
        method: DELETE
        user: "{{ username }}"
        password: "{{ password }}"
        force_basic_auth: true
        headers:
          Content-Type: application/json
        status_code: 204
      register: user_delete

